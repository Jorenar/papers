<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>[N3279] Relation of charter N3280 to old N2611</title>
  <meta name="author" content="Jakub Łukasiewicz">
  <style>
    li { font-weight: bold; }
    li li { font-weight: initial; font-style: italic; }
  </style>
</head>
<body>
  WG14 N3279 | 2024-02-28 | Jakub Łukasiewicz
  <hr>

  This is a quick note mapping the principles from rewritten charter
  <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3280.htm">N3280</a>
  to the principles listed in old line of charters, the last one being
  <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2611.htm">N2611</a>.

  <p>Most of principles are a rewording, a remix, a generalization, or an evolution of the old ones:</p>
  <ul>
    <li>Uphold the character of the language
      <ul>
        <li>6. Keep the spirit of C</li>
      </ul>
    </li>
    <li>Keep the language small and simple
      <ul>
        <li>6c. Keep the language small and simple</li>
        <li>11. Maintain conceptual simplicity</li>
      </ul>
    </li>
    <li>Facilitate portability
      <ul>
        <li>2. C code can be portable</li>
      </ul>
    </li>
    <li>Uphold the potential for high performance
      <ul>
        <li>6e. Make it fast, even if it is not guaranteed to be portable</li>
      </ul>
    </li>
    <li>Allow programming freedom
      <ul>
        <li>2. C code can be non-portable</li>
        <li>6a. Trust the programmer</li>
        <li>6b. Don't prevent the programmer from doing what needs to be done</li>
      </ul>
    </li>
    <li>Codify existing practice to address evident deficiencies
      <ul>
        <li>8. Codify existing practice to address evident deficiencies</li>
        <li>13. Unlike for C99, the consensus at the London meeting was that there should be no invention, without exception</li>
      </ul>
    </li>
    <li>Do not prefer any implementation over others
      <ul>
        <li>1. Existing code is important, existing implementations are not</li>
      </ul>
    </li>
    <li>Ease migration to newer language editions
      <ul>
        <li>1. Existing code is important, existing implementations are not</li>
        <li>9. Minimize incompatibilities with C90 (ISO/IEC 9899:1990)</li>
        <li>14. Migration of an existing code base is an issue</li>
      </ul>
    </li>
    <li>Avoid quiet changes
      <ul>
        <li>4. Avoid "quiet changes"</li>
      </ul>
    </li>
    <li>Enable secure programming
      <ul>
        <li>6f. Make support for safety and security demonstrable</li>
        <li>12. Trust the programmer, as a goal, is outdated in respect to the security and safety programming communities</li>
        <li>15. Application Programming Interfaces (APIs) should be self-documenting when possible</li>
      </ul>
    </li>
    <li>Enable functional safety
      <ul>
        <li>6f. Make support for safety and security demonstrable</li>
        <li>12. Trust the programmer, as a goal, is outdated in respect to the security and safety programming communities</li>
        <li>15. Application Programming Interfaces (APIs) should be self-documenting when possible</li>
      </ul>
    </li>
    <li>Uphold interoperability
      <ul>
        <li>9. Minimize incompatibilities with C90 (ISO/IEC 9899:1990)</li>
        <li>10. Minimize incompatibilities with C++</li>
      </ul>
    </li>
    <li>Follow international standards
      <ul>
        <li>7. Support international programming</li>
      </ul>
    </li>
  </ul>

  <p>But there are also brand new additions:</p>
  <ul>
    <li>Avoid ambiguities</li>
    <li>Do not leave features in an underdeveloped state</li>
    <li>Ease library independence</li>
  </ul>

</body>
</html>
